sw_openmm tutorial
==================

**sw_openmm** carries out molecular dynamics simulations. It uses the openmm python module and supports:

- Amber Simulations
- ANI simulations

However, whilst documentation is available for both, written explanations are only available in this documentation for openmm simulations that use Amber files due to ongoing issues with ANI.

This module requires an Amber topology and coordinates file to work and these are generated by the **sw_build_systems** module.
It is recommended that you launch and follow *tutorial_5_running_openmm_simulations*.

Initialising a simulation
-------------------------

The first step is to import the relevant modules and intialise the filepath manager:

.. code-block:: python

   from modules.sw_openmm import *
   from modules.sw_directories import *
   import os as os
   main_dir = os.getcwd()
   manager = SnippetSimManage(main_dir)

To initialise a simulation, 2 things are required:

- Amber files (topology and coordinates)
- Filepath manager

If you followed the tutorial_x_building_systems you should have amber files for simple molecules. Lets load these files for caffeine and set up a simulation.

.. code-block:: python
   :emphasize-lines: 2

   top, coord = manager.load_amber_filepaths("caffeine")

This returns two variables **top** and **coord**. If you generated the files properly you can print these variables and they will return the path the associated files.

.. code-block:: python
   print(top, coord)

To intialise a simulation object call **AmberSimulation** and pass the, filepath manager object, topology file and coordinate file to it.

.. code-block:: python
   simulation = AmberSimulation(manager, top, coord)

*Note: **AmberSimulation** is being called, but **sw_openmm** includes two other classes; **ANISimulaiton** and **BuildSimulation**. It is important to note that **BuildSimulation** is the main class and **ANISimulation**//**AmberSimulation** simply provide this class with the necessary set up procedures based on the files passed to them.*

Minimizing energy in a simulation
---------------------------------

With the simulation object intialised, it is time to minimize the energy. 
To do this, call the method **minimize_energy()** from the initial simulation object.
A new variable needs to be assigned so the output can be passed to another simulation function - this new variable should be named appropriately (i.e. **minimized_sim**).

.. code-block:: python
   minimized_sim = simulation.minimize_energy()

	